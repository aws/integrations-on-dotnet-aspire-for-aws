permissions:
  id-token: write
"on":
  workflow_dispatch:
    inputs:
      OVERRIDE_VERSION:
        type: string
        required: false
        description: Override Version
name: Create Release PR
jobs:
  release-pr:
    runs-on: ubuntu-latest
    name: Release PR
    env:
      INPUT_OVERRIDE_VERSION: ${{ github.event.inputs.OVERRIDE_VERSION }}
    steps:
    - uses: aws-actions/configure-aws-credentials@ececac1a45f3b08a01d2dd070d28d111c5fe6722
      name: Configure AWS Credentials
      with:
        aws-region: us-west-2
        role-to-assume: ${{ secrets.RELEASE_WORKFLOW_ACCESS_TOKEN_ROLE_ARN }}
    - uses: aws-actions/aws-secretsmanager-get-secrets@5e19ff380d035695bdd56bbad320ca535c9063f2
      name: Retrieve secret from AWS Secrets Manager
      with:
        parse-json-secrets: true
        secret-ids: |
          AWS_SECRET, ${{ secrets.RELEASE_WORKFLOW_ACCESS_TOKEN_NAME }}
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      name: Checkout
      with:
        fetch-depth: "0"
        token: ${{ env.AWS_SECRET_TOKEN }}
    - uses: actions/setup-dotnet@67a3573c9a986a3f9c594539f4ab511d57bb3ce9
      name: Setup .NET 9.0
      with:
        dotnet-version: 9.0.x
    - run: dotnet tool install --global AutoVer --version 0.0.24
      name: Install AutoVer
    - run: |
        git config --global user.email "github-aws-sdk-dotnet-automation@amazon.com"
        git config --global user.name "aws-sdk-dotnet-automation"
      name: Setup Git User
    - run: |
        branch=releases/next-release
        git checkout -b $branch
        echo "BRANCH=$branch" >> $GITHUB_OUTPUT
      id: create-release-branch
      name: Create Release Branch
    - run: autover version
      if: env.INPUT_OVERRIDE_VERSION == ''
      name: Increment Version
    - run: autover version --use-version "$INPUT_OVERRIDE_VERSION"
      if: env.INPUT_OVERRIDE_VERSION != ''
      name: Increment Version
    - run: autover changelog
      name: Update Changelog
    - run: |
        branch=${{ steps.create-release-branch.outputs.BRANCH }}
        git push origin $branch
        git push origin $branch --tags
      name: Push Changes
    - run: |
        version=$(autover changelog --release-name)
        echo "VERSION=$version" >> $GITHUB_OUTPUT
      id: read-release-name
      name: Read Release Name
    - run: |
        changelog=$(autover changelog --output-to-console)
        echo "CHANGELOG<<EOF"$'\n'"$changelog"$'\n'EOF >> "$GITHUB_OUTPUT"
      id: read-changelog
      name: Read Changelog
    - run: |
        pr_url="$(gh pr create --title "${{ steps.read-release-name.outputs.VERSION }}" --body "${{ steps.read-changelog.outputs.CHANGELOG }}" --base dev --head ${{ steps.create-release-branch.outputs.BRANCH }})"
        gh label create "Release PR" --description "A Release PR that includes versioning and changelog changes" -c "#FF0000" -f
        gh pr edit $pr_url --add-label "Release PR"
      env:
        GITHUB_TOKEN: ${{ env.AWS_SECRET_TOKEN }}
      name: Create Pull Request
